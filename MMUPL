#include <stdio.h>
#include <ctype.h>

//global varibles
int charClass;
char lexeme[100];
char keyword[12][6];
char nextChar;
int lexLen;
int token;
int nextToken;
FILE *fptr, *fopen();

//prototypes
void addChar();
void getChar();
void getNonBlank();
int lex();

//character types
#define LETTER 0
#define DIGIT 1
#define UNKNOWN 99

//identifiers
#define SYN_END 9
#define INT_LIT 10
#define IDENT 11
#define LOG_OR 14
#define LOG_AND 15
#define LOG_NOT 16
#define GREAT 17
#define LESS 18
#define EQUAL 19
#define ASSIGN_OP 20
#define ADD_OP 21
#define SUB_OP 22
#define MULT_OP 23
#define DIV_OP 24
#define NEG_OP 25
#define LEFT_PAREN 26
#define RIGHT_PAREN 27
#define LEFT_CBRACKET 28
#define RIGHT_CBRACKET 29
#define LEFT_SBRACKET 30
#define RIGHT_SBRACKET 31

//main
main()
{
 if ((fptr = fopen("test.mmu", "r"))== NULL)
  printf("Error-Cannot open mmupl program\n");
 else
 {
  getChar();
  do
  {
    lex();
  }while (nextToken != EOF);
 }
}

//lookup special characters
int lookup(char ch)
{
 switch(ch)
 {
  //paren & brackets
  case '(':
  addChar();
	nextToken = LEFT_PAREN;
	break;
  case ')':
	addChar();
	nextToken = RIGHT_PAREN;
	break;
  case '[':
	addChar();
	nextToken = LEFT_SBRACKET;
	break;
  case ']':
	addChar();
	nextToken = RIGHT_SBRACKET;
	break;
  case '{':
	addChar();
	nextToken = LEFT_CBRACKET;
	break;
  case '}':
	addChar();
	nextToken = RIGHT_CBRACKET;
	break;
	
  //Relation and logic operators
  case '<':
    addChar();
    nextToken = LESS;
	break;
  case '>':
    addChar();
    nextToken = GREAT;
	break;
  case '=':
    addChar();
    nextToken = EQUAL;
	break;
  case '!':
    addChar();
    nextToken = LOG_NOT;
	break;
  case '&':
    addChar();
    nextToken = LOG_AND;
	break;
 case '^':
    addChar();
    nextToken = LOG_OR;
	break;
	
  //arithmetic operators
  case '+':
	addChar();
	nextToken = ADD_OP;
	break;
  case '-':
	addChar();
	nextToken = SUB_OP;
	break;
  case '*':
	addChar();
	nextToken = MULT_OP;
	break;
  case '/':
	addChar();
	nextToken = DIV_OP;
	break;
  case '~':
    addChar();
    nextToken = NEG_OP;
	break;
	
  //others
  case ':':
    addChar();
    nextToken = ASSIGN_OP;
    break;
  case ';':
    addChar();
    nextToken = SYN_END;
	break;
  default:
	addChar();
	nextToken = EOF;
	break;
 }
}
//add a character to the lexeme
void addChar()
{
 if (lexLen <= 98)
 {
  lexeme[lexLen++]=nextChar;
  lexeme[lexLen]=0;
 }
 else
  printf("Error-Lexeme too long\n");
}

//gets the character and checks it's type
void getChar()
{
 if((nextChar=getc(fptr)) != EOF)
  {
    if(isalpha(nextChar))
     charClass = LETTER;
    else if(isdigit(nextChar))
     charClass = DIGIT;
    else
     charClass = UNKNOWN;
  }
  else
    charClass = EOF;
}

//get whitespaces
void getNonBlank()
{
 while (isspace(nextChar))
  getChar();
}

//the actual analyzer
int lex()
{
 lexLen=0;
 getNonBlank();
 switch(charClass)
 {
  case LETTER:
	addChar();
	getChar();
	while(charClass == LETTER || charClass == DIGIT)
    {
	 addChar();
	 getChar();
	}
	nextToken = IDENT;
	break;
  case DIGIT:
	addChar();
	getChar();
	while(charClass == DIGIT)
    {
	 addChar();
	 getChar();
	}
	nextToken = INT_LIT;
	break;
  case UNKNOWN:
	lookup(nextChar);
	getChar();
	break;
  case EOF:
	nextToken=EOF;
	lexeme[0]='E';
	lexeme[1]='O';
	lexeme[2]='F';
	lexeme[3]=0;
	break;  
 }
 printf("Next Token is: %d, next lexeme is %s\n",nextToken,lexeme);
 return nextToken;
}
